using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Drawing;
using OpenTK;
using OpenTK.Input;
using mcmtestOpenTK.Client.CommonHandlers;
using mcmtestOpenTK.Client.AudioHandlers;
using mcmtestOpenTK.Client.GameplayHandlers.Entities;
using mcmtestOpenTK.Client.GameplayHandlers;
using mcmtestOpenTK.Client.GraphicsHandlers;
using mcmtestOpenTK.Client.GraphicsHandlers.Text;
using mcmtestOpenTK.Client.UIHandlers;
using mcmtestOpenTK.Client.Networking.OneOffs;
using mcmtestOpenTK.Shared;
using mcmtestOpenTK.Client.CommandHandlers;
using mcmtestOpenTK.Client.Networking;
using mcmtestOpenTK.Shared.CommandSystem;
using mcmtestOpenTK.Shared.TagHandlers.Common;
using mcmtestOpenTK.Shared.Game;
using mcmtestOpenTK.Shared.Util;

namespace mcmtestOpenTK.Client.GlobalHandler
{
    public partial class MainGame
    {
        public static int cticknumber = 0;
        static double ctickdelta = 0;

        /// <summary>
        /// Called every update tick - should handle all logic!
        /// </summary>
        /// <param name="sender">Irrelevant</param>
        /// <param name="e">Holds the delta timing information</param>
        static void PrimaryGameWindow_UpdateFrame(object sender, FrameEventArgs EventArgs)
        {
            try
            {
                // Record delta: always first!
                Delta = EventArgs.Time;
                DeltaF = (float)Delta;
                // Calculate cFPS: always first!
                cticknumber++;
                ctickdelta += Delta;
                if (ctickdelta >= 1.0f)
                {
                    cFPS = cticknumber;
                    cticknumber = 0;
                    ctickdelta -= 1.0f;
                }
                GlobalTickTime += Delta;

                // Record current input
                if (Screen.Mode != ScreenMode.Game && MouseHandler.MouseCaptured)
                {
                    MouseHandler.ReleaseMouse();
                }
                MouseHandler.Tick();
                KeyHandler.Tick();

                // Ensure game is easily closeable
                if (KeyHandler.IsPressed(Key.Escape))
                {
                    Exit();
                }

                if (Screen.Mode >= ScreenMode.MainMenu)
                {
                    // Update console
                    UIConsole.Tick();

                    // Check if CVars / Binds need saving
                    if (KeyHandler.Modified || ClientCVar.system.Modified)
                    {
                        StringBuilder output = new StringBuilder(1000);
                        output.Append("// Generated by " + Program.Title + "\n");
                        output.Append("debug none\n");
                        foreach (KeyValuePair<Key, CommandScript> kvp in KeyHandler.Binds)
                        {
                            output.Append("bind ");
                            output.Append(KeyHandler.keystonames[kvp.Key]);
                            output.Append(" \"<{unescape[");
                            output.Append(EscapeTags.Escape(kvp.Value.FullString()));
                            output.Append("]}>\";\n");
                        }
                        foreach (CVar cvar in ClientCVar.system.CVarList)
                        {
                            if (cvar.Flags.HasFlag(CVarFlag.ReadOnly) || cvar.Flags.HasFlag(CVarFlag.ServerControl))
                            {
                                continue;
                            }
                            output.Append("set \"<{unescape[");
                            output.Append(cvar.Name);
                            output.Append("]}>\" \"<{unescape[");
                            output.Append(EscapeTags.Escape(cvar.Value));
                            output.Append("]}>\";\n");
                        }
                        ConfigStr = output.ToString();
                    }
                }

                // Update audio
                Sound.RecalculateChannels();

                // Update networking
                NetworkBase.Tick();
                NetPing.Tick();

                // Update running commands
                ClientCommands.Tick();
            }
            catch (Exception ex)
            {
                ErrorHandler.HandleError("MainGame/Tick-General", ex);
            }
            try
            {
                // Run the current screen
                Screen.Tick();
            }
            catch (Exception ex)
            {
                ErrorHandler.HandleError("MainGame/Tick-Screen", ex);
            }
        }
    }
}
