using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using mcmtestOpenTK.Shared;
using mcmtestOpenTK.ServerSystem.CommandHandlers;
using System.Threading;
using System.Diagnostics;
using mcmtestOpenTK.ServerSystem.NetworkHandlers;
using mcmtestOpenTK.ServerSystem.NetworkHandlers.Global;
using mcmtestOpenTK.ServerSystem.NetworkHandlers.PacketsOut;
using mcmtestOpenTK.ServerSystem.CommonHandlers;
using mcmtestOpenTK.Shared.TagHandlers.Common;

namespace mcmtestOpenTK.ServerSystem.GlobalHandlers
{
    public partial class Server
    {
        static int ticknumber = 0;
        static double tickdelta = 0;

        /// <summary>
        /// Ticks exactly once per every second.
        /// </summary>
        public static void OncePerSecondTick()
        {
            // Tell all players what time it is
            NetworkBase.SendToAllPlayers(new TimePacketOut(false));
        }

        /// <summary>
        /// Tick the entire server.
        /// </summary>
        public static void Tick(double ticktime)
        {
            // Record delta: always first!
            Delta = ticktime;
            DeltaF = (float)Delta;

            // Calculate FPS: always first!
            ticknumber++;
            tickdelta += Delta;
            if (tickdelta >= 1.0f)
            {
                FPS = ticknumber;
                ticknumber = 0;
                tickdelta -= 1.0f;
                OncePerSecondTick();
            }
            GlobalTickTime += Delta;

            // Update global networking
            GlobalNetwork.Tick();

            // Update networking
            NetworkBase.Tick();

            // Update console input
            ConsoleHandler.CheckInput();

            // Update command system
            ServerCommands.Tick();

            // Update the world
            MainWorld.Tick();
                    // Check if CVars / Binds need saving
            if (ServerCVar.system.Modified)
            {
                StringBuilder output = new StringBuilder(1000);
                output.Append("// Generated by " + Program.Title + "\n");
                output.Append("debug none\n");
                foreach (CVar cvar in ServerCVar.system.CVarList)
                {
                    if (cvar.Flags.HasFlag(CVarFlag.ReadOnly) || cvar.Flags.HasFlag(CVarFlag.ServerControl))
                    {
                        continue;
                    }
                    output.Append("set \"<{unescape[");
                    output.Append(cvar.Name);
                    output.Append("]}>\" \"<{unescape[");
                    output.Append(EscapeTags.Escape(cvar.Value));
                    output.Append("]}>\";\n");
                }
                ConfigStr = output.ToString();
            }
            
            // Update networking again for speed's sake
            NetworkBase.Tick();

        }
    }
}
